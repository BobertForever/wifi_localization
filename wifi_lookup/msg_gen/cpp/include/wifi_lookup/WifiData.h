/* Auto-generated by genmsg_cpp for file /nishome/rlynch/ros/rosbuild_ws/class-code/wifi_lookup/msg/WifiData.msg */
#ifndef WIFI_LOOKUP_MESSAGE_WIFIDATA_H
#define WIFI_LOOKUP_MESSAGE_WIFIDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "wifi_lookup/StrArr.h"

namespace wifi_lookup
{
template <class ContainerAllocator>
struct WifiData_ {
  typedef WifiData_<ContainerAllocator> Type;

  WifiData_()
  : HotSpots()
  {
  }

  WifiData_(const ContainerAllocator& _alloc)
  : HotSpots(_alloc)
  {
  }

  typedef std::vector< ::wifi_lookup::StrArr_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::wifi_lookup::StrArr_<ContainerAllocator> >::other >  _HotSpots_type;
  std::vector< ::wifi_lookup::StrArr_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::wifi_lookup::StrArr_<ContainerAllocator> >::other >  HotSpots;


  typedef boost::shared_ptr< ::wifi_lookup::WifiData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wifi_lookup::WifiData_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct WifiData
typedef  ::wifi_lookup::WifiData_<std::allocator<void> > WifiData;

typedef boost::shared_ptr< ::wifi_lookup::WifiData> WifiDataPtr;
typedef boost::shared_ptr< ::wifi_lookup::WifiData const> WifiDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wifi_lookup::WifiData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wifi_lookup::WifiData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wifi_lookup

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wifi_lookup::WifiData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wifi_lookup::WifiData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wifi_lookup::WifiData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a389391568f546e8de0a32553512a637";
  }

  static const char* value(const  ::wifi_lookup::WifiData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa389391568f546e8ULL;
  static const uint64_t static_value2 = 0xde0a32553512a637ULL;
};

template<class ContainerAllocator>
struct DataType< ::wifi_lookup::WifiData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wifi_lookup/WifiData";
  }

  static const char* value(const  ::wifi_lookup::WifiData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wifi_lookup::WifiData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "StrArr[] HotSpots\n\
\n\
================================================================================\n\
MSG: wifi_lookup/StrArr\n\
string MAC\n\
string dB\n\
\n\
";
  }

  static const char* value(const  ::wifi_lookup::WifiData_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wifi_lookup::WifiData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.HotSpots);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct WifiData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wifi_lookup::WifiData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wifi_lookup::WifiData_<ContainerAllocator> & v) 
  {
    s << indent << "HotSpots[]" << std::endl;
    for (size_t i = 0; i < v.HotSpots.size(); ++i)
    {
      s << indent << "  HotSpots[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::wifi_lookup::StrArr_<ContainerAllocator> >::stream(s, indent + "    ", v.HotSpots[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // WIFI_LOOKUP_MESSAGE_WIFIDATA_H

